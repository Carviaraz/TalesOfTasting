using System.Collections.Generic;
using UnityEngine;

public class InventoryManager : MonoBehaviour
{
    public static InventoryManager Instance { get; private set; }

    public List<Item> items = new List<Item>();
    public InventorySlot[] slots;
    public GameObject inventoryUI; // UI ‡∏Ç‡∏≠‡∏á Inventory
    public List<Item> inventoryItems = new List<Item>(); // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    public Transform inventoryGrid; // Grid ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô Inventory
    public GameObject inventorySlotPrefab; // Prefab ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
    
    private CraftSlot selectedCraftSlot; // ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å



public void ToggleInventory()
{
    if (inventoryUI != null)
    {
        inventoryUI.SetActive(!inventoryUI.activeSelf);
    }
    else
    {
        Debug.LogError("‚ùå inventoryUI ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Inspector ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Assign ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß");
    }
}

public void ShiftItemsLeft()
{
    for (int i = 0; i < slots.Length - 1; i++)
    {
        if (slots[i].item == null)
        {
            for (int j = i + 1; j < slots.Length; j++)
            {
                if (slots[j].item != null)
                {
                    slots[i].SetItem(slots[j].item, slots[j].count);
                    slots[j].ClearSlot();
                    break;
                }
            }
        }
    }
}


    void Update()
{
    // Toggle inventory with Tab key
    if (Input.GetKeyDown(KeyCode.Tab))
    {
        ToggleInventory();
    }
    
    // Keep existing I key functionality if you want both options
    if (Input.GetKeyDown(KeyCode.I))
    {
        ToggleInventory();
    }
}


    private void Awake()
{
    if (Instance == null)
    {
        Instance = this;
    }
    else
    {
        Destroy(gameObject);
        return;
    }

    // Hide inventory UI at start
    if (inventoryUI != null)
    {
        inventoryUI.SetActive(false);
    }
    else
    {
        Debug.LogWarning("‚ùå inventoryUI reference is missing!");
    }

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ InventorySlot ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if (slots == null || slots.Length == 0)
    {
        slots = FindObjectsByType<InventorySlot>(FindObjectsInactive.Include, FindObjectsSortMode.None);
    }

    if (slots.Length == 0)
    {
        Debug.LogError("‚ùå InventoryManager: ‡πÑ‡∏°‡πà‡∏û‡∏ö InventorySlot ‡πÉ‡∏ô Scene!");
    }
    else
    {
        Debug.Log($"‚úÖ InventoryManager: ‡∏û‡∏ö {slots.Length} ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô Inventory");
    }
}

    public void UpdateInventoryUI()
{
    Debug.Log("üîÑ Updating Inventory UI...");

    foreach (InventorySlot slot in slots)
    {
        if (slot.item != null && slot.count > 0)
        {
            slot.UpdateUI(); // ‡πÅ‡∏Ñ‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤
        }
        else
        {
            slot.ClearSlot(); // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á
        }
    }
}



    public void RemoveItem(Item itemToRemove)
{
    if (itemToRemove == null)
    {
        Debug.LogError("‚ùå RemoveItem: item ‡πÄ‡∏õ‡πá‡∏ô NULL!");
        return;
    }

    foreach (InventorySlot slot in slots)
    {
        if (slot != null && slot.item == itemToRemove)
        {
            // Reduce the count of the item
            slot.count--;

            // If count reaches 0, clear the slot
            if (slot.count <= 0)
            {
                slot.ClearSlot();
            }
            else
            {
                slot.UpdateUI();
            }

            break;
        }
    }

    UpdateInventoryUI(); // Refresh the entire inventory UI
}

   public void AddItem(Item item)
{
    if (item == null)
    {
        Debug.LogError("‚ùå AddItem: item ‡πÄ‡∏õ‡πá‡∏ô NULL!");
        return;
    }

    bool itemStacked = false;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏ï‡πá‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    foreach (InventorySlot slot in slots)
    {
        if (slot != null && slot.item != null && slot.item.itemName == item.itemName && item.isStackable)
        {
            slot.count++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°
            slot.UpdateUI();
            Debug.Log($"üîÑ ‡∏™‡πÅ‡∏ï‡πá‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° '{item.itemName}' (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà: {slot.count})");
            itemStacked = true;
            break;
        }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏ï‡πá‡∏Å‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    if (!itemStacked)
    {
        foreach (InventorySlot slot in slots)
        {
            if (slot != null && slot.item == null) // ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            {
                slot.AddItem(item, 1);
                Debug.Log($"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡πÉ‡∏´‡∏°‡πà '{item.itemName}' ‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á: {slot.name}");
                break;
            }
        }
    }

    UpdateInventoryUI();
}


    public void CloseAllItemMenus()
    {
        Debug.Log("üîª ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");

        foreach (InventorySlot slot in slots)
        {
            if (slot != null && slot.itemMenuPanel != null)
            {
                slot.itemMenuPanel.SetActive(false);
                slot.isMenuOpen = false;
            }
        }
    }

    public void OpenInventory(CraftSlot craftSlot)
    {
        selectedCraftSlot = craftSlot; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        inventoryUI.SetActive(true); // ‡πÄ‡∏õ‡∏¥‡∏î Inventory
        PopulateInventory(); // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
    }

    void PopulateInventory()
    {
        foreach (Transform child in inventoryGrid)
        {
            Destroy(child.gameObject); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
        }

        foreach (Item item in inventoryItems)
        {
            GameObject slot = Instantiate(inventorySlotPrefab, inventoryGrid);
            InventorySlot inventorySlot = slot.GetComponent<InventorySlot>();
            if (inventorySlot != null)
            {
                inventorySlot.Setup(item, this); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô inventoryManager ‡πÄ‡∏õ‡πá‡∏ô null
            }
            else
            {
                Debug.LogError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ InventorySlot ‡πÑ‡∏î‡πâ");
            }
        }
    }

    public void SelectItem(Item item)
    {
        if (selectedCraftSlot != null)
        {
            selectedCraftSlot.SetItem(item,1); // ‡πÉ‡∏™‡πà‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏•‡∏á CraftSlot ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            inventoryUI.SetActive(false); // ‡∏õ‡∏¥‡∏î Inventory
        }
    }
}